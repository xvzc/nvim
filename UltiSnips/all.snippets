# This file contains snippets that are always defined. I personally
# have snippets for signatures and often needed texts

# sligthly lower priority than everything else since specialized versions
# should overwrite. The user needs to adjust her priority in her snippets to
# ~-55 so that other filetypes will still overwrite.
priority -60

##############
# NICE BOXES #
##############
global !p
from snippets import box_comment

LOREM = """
Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod \
tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At \
vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, \
no sea takimata sanctus est Lorem ipsum dolor sit amet.
"""
endglobal

global !p
def shebang():
	if snip.ft == 'sh':  # shell or bash
		return "#!/bin/bash"
	return "#!/usr/bin/env " + snip.ft
endglobal

snippet #! "Shebang"
`!p snip.rv = shebang()`
endsnippet

snippet modeline "Vim modeline"
`!p snip.rv = box_comment()[0]` vim:ft=${1:filetype} ts=${2:2} sw=${3:2} `!p snip.rv = box_comment()[1]`
endsnippet

#########
# DATES #
#########
snippet date "YYYY-MM-DD" w
`!v strftime("%Y-%m-%d")`
endsnippet

snippet time "hh:mm" w
`!v strftime("%H:%M")`
endsnippet

snippet datetime "YYYY-MM-DD hh:mm" w
`!v strftime("%Y-%m-%d %H:%M")`
endsnippet

snippet todo "TODO comment" bw
`!p snip.rv=comment()` ${2:TODO}: `!v strftime('%Y-%m-%d')` ${0}

endsnippet

##########
#  Misc  #
##########
snippet uuid "Random UUID" w
`!p if not snip.c: import uuid; snip.rv = str(uuid.uuid4())`
endsnippet

global !p
def t_get(index, default=''):
    # Get the value of the placeholder `t`, but avoids IndexError.
    try:
        return t[index]
    except IndexError:
        return default
endglobal

global !p
def t_len(idx):
    # Get the value of the placeholder `t`, but avoids IndexError.
    try: 
        ret = 0
        for c in t[idx]:
            ret += 2 if ord(c) > 127 else 1
        return ret
    except IndexError: 
        return 0
endglobal

# ┏━━━━━━━┓
# ┃ Boxes ┃
# ┗━━━━━━━┛
snippet box "Box (uses thiner unicode ──)"
`!p snip.rv = box_comment("top")[0] + ' ┌' + '─' * (t_len(1) + 2) + '┐ ' + box_comment("top")[1]`
`!p snip.rv = box_comment("mid")[0]` │ $1 │ `!p snip.rv = box_comment("mid")[1]`
`!p snip.rv = box_comment("bot")[0] + ' └' + '─' * (t_len(1) + 2) + '┘ ' + box_comment("bot")[1]`$0
endsnippet

snippet bbox "Box (uses thicker unicode ━━)"
`!p snip.rv = box_comment("top")[0] + ' ┏' + '━' * (t_len(1) + 2) + '┓ ' + box_comment("top")[1]`
`!p snip.rv = box_comment("mid")[0]` ┃ $1 ┃ `!p snip.rv = box_comment("mid")[1]`
`!p snip.rv = box_comment("bot")[0] + ' ┗' + '━' * (t_len(1) + 2) + '┛ ' + box_comment("bot")[1]`$0
endsnippet


# ┏━━━━━━━━━━━━━━━━┓
# ┃ Splitter Lines ┃
# ┗━━━━━━━━━━━━━━━━┛

snippet ### "Horizontal rule filled with ###"
`!p snip.rv = box_comment()[0] + " " + '#' * 60 + " " + box_comment()[1]`
endsnippet

snippet --- "Horizontal rule filled with ━"
`!p snip.rv = box_comment()[0] + " " + '━' * 60 + " " + box_comment()[1]`
endsnippet

