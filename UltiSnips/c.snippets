## Main
# main
snippet main
int main(int argc, char *argv[]) {
	${0}
	return 0;
}
endsnippet

# main(void)
snippet mainn
int main(void) {
	${0}
	return 0;
}
endsnippet

##
## Preprocessor
# #include <...>
snippet inc
#include <${1:stdio}.h>
endsnippet

# ifndef...define...endif
snippet ndef
#ifndef $1
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet

# define
snippet def
#define
endsnippet

# ifdef...endif
snippet ifdef
#ifdef ${1:FOO}
${2:#define }
#endif

endsnippet

# #if
snippet #if
#if ${1:FOO}
${0:${VISUAL}}
#endif

endsnippet

# if
snippet if
if (${1:true}) {
	${0:${VISUAL}}
}
endsnippet

snippet ife
if (${1:true}) {
	${2:${VISUAL}}
} else {
	${0}
}
endsnippet

# else
snippet el
else {
	${0:${VISUAL}}
}
endsnippet

# else if
snippet elif
else if (${1:true}) {
	${0:${VISUAL}}
}
endsnippet

# ifi
snippet ifi
if (${1:true}) ${0};
endsnippet

# ternary
snippet t
${1:/* condition */} ? ${2:a} : ${3:b}
endsnippet

# switch
snippet switch
switch (${1:/* variable */}) {
	case ${2:/* variable case */}:
								${3}
								${4:break;}${5}
	default:
								${6}
}
endsnippet

# switch without default
snippet switchndef
switch (${1:/* variable */}) {
	case ${2:/* variable case */}:
								${3}
								${4:break;}${5}
}
endsnippet

# case
snippet case
case ${1:/* variable case */}:
${2}
${3:break;}
endsnippet

snippet ret
return ${0};
endsnippet

##
## Loops
## Iteration
snippet for
for (${1}) {
	${0}
}
endsnippet

# for i
snippet fori
for (int ${1:i} = ${2:0}; $3; ${4:++}$1) {
	${0}
}
endsnippet

# while
snippet wh
while (${1}) {
	${0}
}
endsnippet

# do... while
snippet do
do {
	${0}
} while (${1});
endsnippet

##
## Functions
# function definition
snippet fun
${1:void} ${2:function_name}(${3}) {
	${4}
}
endsnippet

snippet fund
${1:void} ${2:function_name}(${3});
endsnippet

##
## Types
# typedef
snippet td
typedef ${1:int} ${2:MyCustomType};
endsnippet

# struct
snippet st
struct ${1:name)} {
	${0}
}
endsnippet

snippet enum
enum ${1:name} { ${0} };
endsnippet

##
## Input/Output
# printf
snippet pr
printf("${1:%s}\n"${2});
endsnippet

# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
fprintf(${1:stderr}, "${2:%s}\n"${3});
endsnippet

snippet prd
printf("${1:} = %d\n", $1);
endsnippet

snippet prf
printf("${1:} = %f\n", $1);
endsnippet

snippet prx
printf("${1:} = %${2}\n", $1);
endsnippet

## Assertions
snippet ass
assert(${0});
endsnippet

snippet anl
assert(${1:ptr} != NULL);
endsnippet

##
# TODO section
snippet todo
/*! TODO: ${1:Todo description here} */
endsnippet

